org.pillarone.riskanalytics.graph.pc.components.claims.ClaimsAggregator=Component for aggregating claims of type <code>ClaimPacket</code>. \
  Any number of links can be connected to the <code>inClaims</code>-port, each sending an arbitrary number of <code>ClaimPacket</code>. \
  For further information see the <a href="http://www.pillarone.org/">javadoc</a>-entries. \
  <h4>See also:</h4><a href="resourceKey:org.pillarone.riskanalytics.graph.pc.components.Adder">Adder</a>

org.pillarone.riskanalytics.graph.pc.components.claims.NormalClaimGenerator=Claims Generator, Normal. <br> \
  If the <code>inFrequency</code>-port is connected it generated <code>n</code> independent identically distributed claims and writes them to the <code>outClaim</code>-port. \
  The number <code>n</code> is obtained by summing all the frequencies received at the <code>inFrequency</code>-port in a given iteration.<br> \
  If the <code>inFrequency</code>-port is not connected one claim is generated and written to the <code>outClaim</code>-port. <br>In either case, a Normal distribution is used to generated the claims. \
  <h4>See also:</h4><a href="resourceKey:org.pillarone.riskanalytics.graph.pc.components.claims.LognormalClaimsGenerator">LognormalClaimsGenerator</a>, \
    <a href="resourceKey:org.pillarone.riskanalytics.graph.pc.components.claims.ParetoClaimsGenerator">ParetoClaimsGenerator</a>

org.pillarone.riskanalytics.graph.pc.components.claims.LognormalClaimGenerator=Claims Generator, Lognormal. <br> \
  If the <code>inFrequency</code>-port is connected it generated <code>n</code> independent identically distributed claims and writes them to the <code>outClaim</code>-port. \
  The number <code>n</code> is obtained by summing all the frequencies received at the <code>inFrequency</code>-port in a given iteration.<br> \
  If the <code>inFrequency</code>-port is not connected one claim is generated and written to the <code>outClaim</code>-port. <br>In either case, a lognormal distribution is used to generated the claims. \
  <h4>See also:</h4><a href="resourceKey:org.pillarone.riskanalytics.graph.pc.components.claims.LognormalClaimsGenerator">LognormalClaimsGenerator</a>, \
    <a href="resourceKey:org.pillarone.riskanalytics.graph.pc.components.claims.ParetoClaimsGenerator">ParetoClaimsGenerator</a>

org.pillarone.riskanalytics.graph.pc.components.claims.ParetoClaimGenerator=Claims Generator, Pareto. <br> \
  If the <code>inFrequency</code>-port is connected it generated <code>n</code> independent identically distributed claims and writes them to the <code>outClaim</code>-port. \
  The number <code>n</code> is obtained by summing all the frequencies received at the <code>inFrequency</code>-port in a given iteration.<br> \
  If the <code>inFrequency</code>-port is not connected one claim is generated and written to the <code>outClaim</code>-port. <br>In either case, a Pareto distribution is used to generated the claims. \
  <h4>See also:</h4><a href="resourceKey:org.pillarone.riskanalytics.graph.pc.components.claims.LognormalClaimsGenerator">LognormalClaimsGenerator</a>, \
    <a href="resourceKey:org.pillarone.riskanalytics.graph.pc.components.claims.NormalClaimsGenerator">NormalClaimsGenerator</a>

org.pillarone.riskanalytics.graph.pc.components.frequency.PoissonFrequencyGenerator=Generator for Poisson-distributed numbers.\
  <h4>See also: </h4>

org.pillarone.riskanalytics.graph.pc.components.reinsurance.XLReinsuranceContract=Component for modeling the impact of excess \
  of loss reinsurance which responds if an individual claim suffered by the insurer exceeds a certain amount (retention, priority or deductible). \
  An example of this form of reinsurance is where the insurer is prepared to accept a loss of 1 million for any loss which may occur \
  and they purchase a layer of reinsurance of 4 million in excess of 1 million. \
  If a loss of 3 million occurs, then insurer will retain 1 million and will recover 2 million from its reinsurer. \
  In this example, the reinsured will retain any loss exceeding 5 million unless they have purchased a further excess layer \
  (second layer) of say 10 million excess of 5 million.<br>Different layers are modelled by different components. \
  <h4>See also: </h4>
